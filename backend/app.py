import os
import re
import requests
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv

# Load environment variables from .env
load_dotenv()
HF_API_TOKEN = os.getenv("HF_API_TOKEN")

API_URL = "https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1"
HEADERS = {
    "Authorization": f"Bearer {HF_API_TOKEN}",
    "Content-Type": "application/json"
}

# --- Facty logic (unchanged) ---
def contains_sensitive_content(text):
    mots_interdits = ["sexe", "viol", "suicide", "pornographie", "drogue", "meurtre", "terrorisme"]
    return any(mot.lower() in text.lower() for mot in mots_interdits)

def is_fact_check_question(text):
    text = text.lower().strip()
    if text.endswith("?"):
        return True
    patterns = [
        r"est[- ]ce que", r"c'est vrai", r"c'est faux", r"est[- ]ce une info",
        r"peut[- ]on croire", r"ai[- ]je raison", r"vrai ou faux", r"infox", r"intox",
        r"les .* existent", r"existe[- ]t[- ]il", r"sont[- ]ils r√©els", r"as[- ]tu v√©rifi√©",
        r"la v√©rit√© sur", r"mythe ou r√©alit√©", r"les gens disent que"
    ]
    return any(re.search(pat, text) for pat in patterns)

def is_malicious_bypass_attempt(text):
    keywords = [
        "√©cris un code", "code python", "programme", "fonction", "script", "traduis", "r√©sume", 
        "donne moi un code", "cr√©e un", "g√©n√®re", "exemple de", "po√®me", "dessine", "fais une blague",
        "joue", "jouons", "imagine", "raconte", "r√©dige", "√©cris une", "fais moi un", "compile", "corrige"
    ]
    return any(kw in text.lower() for kw in keywords)

def chat_with_ai(user_input, user_name, niveau="enfant"):
    if niveau == "enfant":
        system_prompt = (
            f"Tu es Facty, une super IA rigolote et gentille qui aide les enfants de moins de 11 ans √† savoir si une information est vraie, fausse ou incertaine. "
            f"Tu parles √† {user_name}, un enfant curieux üëßüßí. Tu utilises des mots tr√®s simples, des phrases courtes, et tu expliques calmement. "
            f"Tu r√©ponds comme un grand fr√®re ou une grande s≈ìur sympa, avec bienveillance. "
            f"N‚Äôutilise pas de mots compliqu√©s ou effrayants. Si tu ne sais pas, dis-le honn√™tement. Tu peux proposer de demander √† un adulte."
        )
        if contains_sensitive_content(user_input):
            return "‚õî Cette question n‚Äôest pas adapt√©e aux enfants. Tu peux demander √† un adulte de t‚Äôaider."
    else:
        system_prompt = f"Tu es Facty. Tu aides {user_name} √† v√©rifier des informations. Tu restes simple, clair et bienveillant."

    payload = {
        "inputs": f"<s>[INST] {system_prompt}\n{user_input} [/INST]",
        "parameters": {
            "temperature": 0.5,
            "max_new_tokens": 300,
            "top_p": 0.9
        }
    }
    try:
        response = requests.post(API_URL, headers=HEADERS, json=payload, timeout=30)
        if response.status_code == 200:
            full_text = response.json()[0].get("generated_text", "")
            if "[/INST]" in full_text:
                response_text = full_text.split("[/INST]")[-1].strip()
            else:
                response_text = full_text.strip()
            return response_text
        else:
            return f"Erreur API ({response.status_code}) : {response.text}"
    except Exception as e:
        return f"Une erreur s‚Äôest produite : {e}"

# --- FastAPI app ---
app = FastAPI()

# Allow CORS for frontend dev
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class ChatRequest(BaseModel):
    message: str
    name: str
    age: int

@app.post("/chat")
async def chat_endpoint(req: ChatRequest):
    # Step logic (simulate the Gradio state machine)
    if req.name == "":
        return {"response": "üëã Bonjour ! Je suis Facty. Pour commencer, dis-moi ton pr√©nom üôÇ"}
    if req.age == 0:
        return {"response": f"Enchant√© {req.name} ! Quel √¢ge as-tu ?"}
    try:
        age = int(req.age)
    except Exception:
        return {"response": "Peux-tu m‚Äôindiquer ton √¢ge avec un nombre ? (ex : 10)"}
    niveau = "enfant" if age < 11 else "adulte"
    if is_malicious_bypass_attempt(req.message):
        return {"response": "üö´ Je suis uniquement un assistant de v√©rification d'informations. Je ne peux pas faire de code ou r√©pondre √† d'autres types de demandes."}
    if not is_fact_check_question(req.message):
        return {"response": "‚ùó Je suis Facty. Pose-moi une question pour savoir si une information est vraie ou fausse."}
    response = chat_with_ai(req.message, req.name, niveau)
    return {"response": response}
